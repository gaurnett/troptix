{"version":3,"names":["useAnimatedValue","initialValue","radius","maxValue","clockwise","delay","value","duration","onAnimationComplete","activeStrokeWidth","inActiveStrokeWidth","progressFormatter","v","Math","round","strokeColorConfig","undefined","animatedValue","useSharedValue","circleCircumference","useCircleValues","sortedStrokeColors","useMemo","sort","a","b","colors","map","item","color","values","animatedCircleProps","useAnimatedProps","biggestValue","max","maxPercentage","config","strokeDashoffset","strokeColor","interpolateColor","stroke","useEffect","withDelay","withTiming","easing","Easing","linear","isFinished","runOnJS","progressValue","useDerivedValue","animatedTextProps","text"],"sources":["useAnimatedValue.ts"],"sourcesContent":["import {useEffect, useMemo} from 'react';\nimport {\n  Easing,\n  interpolateColor,\n  runOnJS,\n  useAnimatedProps,\n  useDerivedValue,\n  useSharedValue,\n  withDelay,\n  withTiming,\n} from 'react-native-reanimated';\n\nimport type { StrokeColorConfigType } from '../types';\n\nimport useCircleValues from './useCircleValues';\n\nexport interface UseAnimatedValueProps {\n  value: number;\n  initialValue?: number;\n  radius?: number;\n  duration?: number;\n  delay?: number;\n  maxValue?: number;\n  onAnimationComplete?: () => void;\n  activeStrokeWidth?: number;\n  inActiveStrokeWidth?: number;\n  clockwise?: boolean;\n  valueSuffix?: string;\n  valuePrefix?: string;\n  // eslint-disable-next-line no-unused-vars\n  progressFormatter?: (v: number) => number | string;\n  strokeColorConfig?: StrokeColorConfigType[];\n}\n\ntype Config = {\n  strokeDashoffset: number;\n  stroke?: string | number;\n};\n\nexport default function useAnimatedValue({\n  initialValue = 0,\n  radius = 60,\n  maxValue = 100,\n  clockwise,\n  delay = 0,\n  value,\n  duration,\n  onAnimationComplete = () => null,\n  activeStrokeWidth = 10,\n  inActiveStrokeWidth = 10,\n  progressFormatter = (v: number) => {\n    'worklet';\n\n    return Math.round(v);\n  },\n  strokeColorConfig = undefined,\n}: UseAnimatedValueProps) {\n  const animatedValue = useSharedValue(initialValue);\n  const { circleCircumference } = useCircleValues({\n    radius,\n    activeStrokeWidth,\n    inActiveStrokeWidth,\n  });\n\n  const sortedStrokeColors = useMemo(() => {\n    if (!strokeColorConfig) {return null;}\n    return strokeColorConfig.sort((a, b) => a.value - b.value);\n  }, [strokeColorConfig]);\n\n  const colors = useMemo(() => {\n    if (!sortedStrokeColors) {return null;}\n    return sortedStrokeColors.map((item) => item.color);\n  }, [sortedStrokeColors]);\n\n  const values = useMemo(() => {\n    if (!sortedStrokeColors) {return null;}\n    return sortedStrokeColors.map((item) => item.value);\n  }, [sortedStrokeColors]);\n\n  const animatedCircleProps = useAnimatedProps(() => {\n    let biggestValue: number = Math.max(initialValue, maxValue);\n    biggestValue = biggestValue <= 0 ? 1 : biggestValue;\n    const maxPercentage: number = clockwise\n      ? (100 * animatedValue.value) / biggestValue\n      : (100 * -animatedValue.value) / biggestValue;\n      const config: Config = {\n        strokeDashoffset:\n          circleCircumference - (circleCircumference * maxPercentage) / 100,\n      };\n      const strokeColor =\n        colors && values\n          ? interpolateColor(animatedValue.value, values, colors)\n          : undefined;\n      if (strokeColor) {\n        config.stroke = strokeColor;\n      }\n      return config;\n  });\n\n  useEffect(() => {\n    animatedValue.value = withDelay(\n      delay,\n      withTiming(value, { duration, easing: Easing.linear }, (isFinished) => {\n        if (isFinished) {\n          runOnJS(onAnimationComplete)?.();\n        }\n      })\n    );\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [value]);\n\n  const progressValue = useDerivedValue(() => {\n    return `${progressFormatter(animatedValue.value)}`;\n  });\n\n  const animatedTextProps = useAnimatedProps(() => {\n    return {\n      text: progressValue.value,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } as any; // eslint-disable-line prettier/prettier\n  });\n\n  return {\n    animatedCircleProps,\n    animatedTextProps,\n    progressValue,\n  };\n}\n"],"mappings":"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"}