datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  PATRON
  ORGANIZER
  PROMOTER
}

model Users {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  email     String    @unique
  name      String
  stripeId  String?
  role      Role      @default(PATRON)
  tickets   Tickets[]
  orders    Orders[]
}

enum TicketStatus {
  AVAILABLE
  NOT_AVAILABLE
}

model Tickets {
  id        String       @id @default(uuid())
  createdAt DateTime     @default(now())
  status    TicketStatus @default(NOT_AVAILABLE)

  event        Events      @relation(fields: [eventId], references: [id])
  eventId      String
  order        Orders      @relation(fields: [orderId], references: [id])
  orderId      String
  ticketType   TicketTypes @relation(fields: [ticketTypeId], references: [id])
  ticketTypeId String
  user         Users       @relation(fields: [userId], references: [id])
  userId       String

  @@index([eventId])
  @@index([orderId])
  @@index([ticketTypeId])
  @@index([userId])
}

enum OrderStatus {
  PENDING
  CANCELLED
  COMPLETED
}

model Orders {
  id       String      @id @default(uuid())
  total    Float
  subtotal Float
  fees     Float
  tickets  Tickets[]
  status   OrderStatus @default(PENDING)

  user    Users  @relation(fields: [userId], references: [id])
  userId  String
  event   Events @relation(fields: [eventId], references: [id])
  eventId String

  @@index([userId])
  @@index([eventId])
}

model Events {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDraft   Boolean  @default(true)

  // Event Details
  imageUrl        String
  name            String
  description     String
  summary         String?
  organizer       String
  organizerUserId String

  // Date and Time Details
  startDate DateTime
  startTime DateTime
  endDate   DateTime
  endTime   DateTime

  // Location Details
  venue       String
  address     String
  country     String
  countryCode String
  latitude    Float
  longitude   Float

  // Ticket Details
  tickets     Tickets[]
  ticketTypes TicketTypes[]
  orders      Orders[]
}

enum TicketFeeStructure {
  // Fees to be included in the ticket price you set. 
  // Fees will be deducted from your sales at the time of your payout.
  ABSORB_TICKET_FEES
  // Attendees to pay the fees on top of the ticket price you set. 
  // Fees will be collected off the top of your ticket sales at the time of your payout.
  PASS_TICKET_FEES
}

model TicketTypes {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Ticket Details
  name               String
  description        String
  maxPurchasePerUser Int
  quantity           Int

  // Sale Date Details
  saleStartDate DateTime
  saleStartTime DateTime
  saleEndDate   DateTime
  saleEndTime   DateTime

  // Price Details
  price         Float
  ticketingFees TicketFeeStructure @default(PASS_TICKET_FEES)

  event   Events    @relation(fields: [eventId], references: [id])
  eventId String
  tickets Tickets[]

  @@index([eventId])
}
