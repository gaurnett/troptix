generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                  String                @id @default(uuid())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  email               String                @unique
  name                String?
  firstName           String?
  lastName            String?
  stripeId            String?
  role                Role                  @default(PATRON)
  telephoneNumber     String?
  billingAddress1     String?
  billingAddress2     String?
  billingCity         String?
  billingCountry      String?
  billingZip          String?
  billingState        String?
  orders              Orders[]
  socialMediaAccounts SocialMediaAccounts[]
  tickets             Tickets[]
}

model SocialMediaAccounts {
  id                     String                 @id @default(uuid())
  socialMediaAccountType SocialMediaAccountType @default(UNKNOWN)
  link                   String?
  userId                 String?
  user                   Users?                 @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Tickets {
  id           String       @id @default(uuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime?    @updatedAt
  status       TicketStatus @default(NOT_AVAILABLE)
  ticketsType  TicketType?  @default(PAID)
  fees         Float?
  subtotal     Float?
  total        Float?
  firstName    String?
  lastName     String?
  email        String?
  eventId      String
  orderId      String
  ticketTypeId String?
  userId       String?
  event        Events       @relation(fields: [eventId], references: [id])
  order        Orders       @relation(fields: [orderId], references: [id])
  ticketType   TicketTypes? @relation(fields: [ticketTypeId], references: [id])
  user         Users?       @relation(fields: [userId], references: [id])

  @@index([eventId])
  @@index([orderId])
  @@index([ticketTypeId])
  @@index([userId])
}

model Orders {
  id               String      @id @default(uuid())
  stripeCustomerId String?
  stripePaymentId  String?     @unique
  createdAt        DateTime?   @default(now())
  updatedAt        DateTime?   @updatedAt
  total            Float
  subtotal         Float?
  fees             Float?
  name             String?
  firstName        String?
  lastName         String?
  email            String?
  cardType         String?
  cardLast4        String?
  telephoneNumber  String?
  billingAddress1  String?
  billingAddress2  String?
  billingCity      String?
  billingCountry   String?
  billingZip       String?
  billingState     String?
  ticketsLink      String?
  status           OrderStatus @default(PENDING)
  userId           String?
  eventId          String
  event            Events      @relation(fields: [eventId], references: [id])
  user             Users?      @relation(fields: [userId], references: [id])
  tickets          Tickets[]

  @@index([eventId])
  @@index([userId])
}

model Events {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  isDraft         Boolean          @default(true)
  imageUrl        String?          @db.VarChar(2000)
  name            String
  description     String           @db.VarChar(2000)
  summary         String?
  organizer       String
  organizerUserId String
  startDate       DateTime
  startTime       DateTime?
  endDate         DateTime
  endTime         DateTime?
  venue           String?
  address         String
  country         String?
  countryCode     String?
  latitude        Float?
  longitude       Float?
  delegatedUsers  DelegatedUsers[]
  orders          Orders[]
  promotions      Promotions[]
  ticketTypes     TicketTypes[]
  tickets         Tickets[]
}

model Promotions {
  id            String        @id @default(uuid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  code          String
  promotionType PromotionType @default(UNKNOWN)
  value         Float
  eventId       String?
  event         Events?       @relation(fields: [eventId], references: [id])

  @@index([eventId])
}

model TicketTypes {
  id                 String             @id @default(uuid())
  ticketType         TicketType?        @default(PAID)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  name               String
  description        String
  maxPurchasePerUser Int
  quantity           Int
  quantitySold       Int?               @default(0)
  saleStartDate      DateTime
  saleStartTime      DateTime?
  saleEndDate        DateTime
  saleEndTime        DateTime?
  price              Float
  ticketingFees      TicketFeeStructure @default(PASS_TICKET_FEES)
  eventId            String
  event              Events             @relation(fields: [eventId], references: [id])
  tickets            Tickets[]
  discountCode       String?

  @@index([eventId])
}

model DelegatedUsers {
  id              String          @id @default(uuid())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  delegatedAccess DelegatedAccess
  email           String
  userId          String
  eventId         String
  event           Events          @relation(fields: [eventId], references: [id])

  @@index([eventId])
}

enum Role {
  PATRON
  ORGANIZER
  PROMOTER
}

enum SocialMediaAccountType {
  UNKNOWN
  FACEBOOK
  INSTAGRAM
  TIKTOK
  TWITTER
}

enum TicketStatus {
  AVAILABLE
  NOT_AVAILABLE
}

enum TicketType {
  FREE
  PAID
  COMPLEMENTARY
}

enum OrderStatus {
  PENDING
  CANCELLED
  COMPLETED
}

enum PromotionType {
  UNKNOWN
  PERCENTAGE
  DOLLAR_AMOUNT
}

enum TicketFeeStructure {
  ABSORB_TICKET_FEES
  PASS_TICKET_FEES
}

enum DelegatedAccess {
  OWNER
  TICKET_SCANNER
}
